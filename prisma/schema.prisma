// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  name         String?
  phone        String      @unique
  role         UserRole    @default(WORKER)
  settlementId String?
  settlement   Settlement? @relation(fields: [settlementId], references: [id])
  tasks        Task[]
  responses    Response[]
  reports      DailyReport[]
  notices      Notice[]
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("users")
}

model Settlement {
  id        String   @id @default(cuid())
  name      String   @unique
  location  String?
  users     User[]
  tasks     Task[]
  campaignLinks CampaignSettlement[]
  noticeLinks NoticeSettlement[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settlements")
}

enum UserRole {
  WORKER
  ADMIN
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  message   String
  active    Boolean  @default(true)
  priority  NoticePriority @default(MEDIUM)
  allUsers  Boolean  @default(true)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  settlements NoticeSettlement[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notices")
}

enum NoticePriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  settlementId String
  settlement   Settlement @relation(fields: [settlementId], references: [id])
  imageId      String
  image        Image    @relation(fields: [imageId], references: [id])
  campaignId   String?
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  responses    Response[]
  completed    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId, createdAt])
  @@index([completed, createdAt])
  @@map("tasks")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  question  String
  campaignId String?
  campaign  Campaign? @relation(fields: [campaignId], references: [id])
  groundTruth Boolean?
  active    Boolean  @default(true)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Response {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  answer    Boolean
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([taskId])
  @@map("responses")
}

model DailyReport {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  date       DateTime
  totalTasks Int      @default(0)
  correct    Int      @default(0)
  accuracy   Float    @default(0)
  basePay    Float    @default(0)
  bonusPay   Float    @default(0)
  totalPay   Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId, date])
  @@unique([userId, date], name: "userId_date")
  @@map("daily_reports")
}

model Campaign {
  id        String   @id @default(cuid())
  title     String
  question  String
  active    Boolean  @default(true)
  archived  Boolean  @default(false)
  images    Image[]
  tasks     Task[]
  settlements CampaignSettlement[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaigns")
}

model CampaignSettlement {
  id           String     @id @default(cuid())
  campaignId   String
  settlementId String
  campaign     Campaign   @relation(fields: [campaignId], references: [id])
  settlement   Settlement @relation(fields: [settlementId], references: [id])

  @@unique([campaignId, settlementId])
  @@map("campaign_settlements")
}

model NoticeSettlement {
  id           String     @id @default(cuid())
  noticeId     String
  settlementId String
  notice       Notice     @relation(fields: [noticeId], references: [id])
  settlement   Settlement @relation(fields: [settlementId], references: [id])

  @@unique([noticeId, settlementId])
  @@map("notice_settlements")
}
